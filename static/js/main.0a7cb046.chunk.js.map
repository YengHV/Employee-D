{"version":3,"sources":["components/Header.js","components/Search.js","utils/API.js","components/Container.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Search","type","id","placeholder","axios","get","Container","fluid","Table","useState","results","search","table","setTable","useEffect","API","then","res","data","catch","err","console","log","map","result","key","value","src","picture","thumbnail","alt","name","first","last","phone","email","dob","date","substring","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kNAWeA,MARf,SAAgBC,GACd,OACE,yBAAKC,UAAW,UAChB,oDCMWC,MATf,SAAgBF,GACd,OAEE,yBAAKC,UAAU,aACf,2BAAOE,KAAK,SAASC,GAAG,SAASC,YAAY,sB,yBCLlC,EACG,WACV,OAAOC,IAAMC,IAAI,kDCEVC,MAJf,SAAmBR,GACjB,OAAO,uCAAKC,UAAS,mBAAcD,EAAMS,MAAQ,SAAW,KAAUT,KCyCzDU,MAvCf,SAAeV,GAAQ,IAAD,EACMW,mBAAS,CACjCC,QAAS,GACTC,OAAQ,KAHU,mBACbC,EADa,KACNC,EADM,KAWpB,OALAC,qBAAU,WACRC,IACGC,MAAK,SAAAC,GAAG,OAAIJ,EAAS,CAAEH,QAASO,EAAIC,KAAKR,aACzCS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,IAED,6BACE,kBAAC,EAAD,KACGR,EAAMF,QAAQa,KAAI,SAAAC,GAAM,OACvB,yBAAKzB,UAAU,MAAM0B,IAAKD,EAAOtB,GAAGwB,OAClC,yBAAK3B,UAAU,oBACb,yBAAK4B,IAAKH,EAAOI,QAAQC,UAAWC,IAAKN,EAAOO,KAAKC,SAEvD,yBAAKjC,UAAU,eACZyB,EAAOO,KAAKC,MAAOR,EAAOO,KAAKE,MAElC,yBAAKlC,UAAU,gBACZyB,EAAOU,OAEV,yBAAKnC,UAAU,gBACZyB,EAAOW,OAEV,yBAAKpC,UAAU,cACZyB,EAAOY,IAAIC,KAAKC,UAAU,EAAG,YCnB7BC,MAVf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.0a7cb046.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Header(props) {\n  return (\n    <div className =\"header\">\n    <h1>Employee Directory</h1>\n    </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\n\n\nfunction Search(props) {\n  return (\n    \n    <div className=\"searchBar\">\n    <input type=\"search\" id=\"search\" placeholder=\"Search Employee\" />\n    </div>\n  );\n}\n\nexport default Search;","import axios from \"axios\";\n\nexport default {\n    getEmployees: function() {\n        return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\n    }\n}","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;","import React, { useState, useEffect } from \"react\";\nimport API from \"../utils/API\";\nimport Container from \"./Container\"\n\n\nfunction Table(props) {\n  const [table, setTable] = useState({\n    results: [],\n    search: \"\"\n  });\n\n  useEffect(() => {\n    API.getEmployees()\n      .then(res => setTable({ results: res.data.results }))\n      .catch(err => console.log(err));\n  }, []);\n  return (\n    <div>\n      <Container>\n        {table.results.map(result => (\n          <div className=\"row\" key={result.id.value}>\n            <div className=\"col-sm thumbnail\">\n              <img src={result.picture.thumbnail} alt={result.name.first}></img>\n            </div>\n            <div className=\"col-sm name\">\n              {result.name.first}{result.name.last}\n            </div>\n            <div className=\"col-sm phone\">\n              {result.phone}\n            </div>\n            <div className=\"col-sm email\">\n              {result.email}\n            </div>\n            <div className=\"col-sm dob\">\n              {result.dob.date.substring(0, 10)}\n            </div>\n          </div>\n        ))}\n\n      </Container>\n    </div>\n  );\n}\n\nexport default Table;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Search from \"./components/Search\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Search />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}